name: Test Publish Readiness

on:
  workflow_dispatch:
  pull_request:
    branches: [master, main]
    paths:
      - 'src/**'
      - 'test/**'
      - 'integration-tests/**'
      - 'package.json'
      - 'tsconfig*.json'

jobs:
  test-publish-readiness:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: 📋 Run comprehensive tests
      run: |
        echo "🧪 Running all tests to verify publish readiness..."

    - name: Type checking
      run: |
        echo "🔍 Type checking..."
        npm run type-check
        echo "✅ Type checking passed"

    - name: Unit tests
      run: |
        echo "🧪 Running unit tests..."
        npm test
        echo "✅ Unit tests passed"

    - name: Build package
      run: |
        echo "🔨 Building package..."
        npm run build
        echo "✅ Build completed"

    - name: Integration tests
      run: |
        echo "🔗 Running integration tests..."
        npm run test:integration
        echo "✅ Integration tests passed"

    - name: Security audit
      run: |
        echo "🛡️ Running security audit..."
        pnpm audit --audit-level moderate
        echo "✅ Security audit passed"

    - name: Package verification
      run: |
        echo "📦 Verifying package structure..."

        # Check all required files
        required_files=(
          "dist/index.js"
          "dist/index.d.ts"
          "package.json"
          "README.md"
        )

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done

        # Verify package.json structure
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'main', 'types', 'exports', 'description', 'author', 'license'];

          console.log('📋 Package info:');
          console.log(\`   Name: \${pkg.name}\`);
          console.log(\`   Version: \${pkg.version}\`);
          console.log(\`   Description: \${pkg.description}\`);

          for (const field of required) {
            if (!pkg[field]) {
              console.error(\`❌ Missing required field: \${field}\`);
              process.exit(1);
            }
          }
          console.log('✅ Package.json structure verified');
        "

    - name: Test package functionality
      run: |
        echo "🧪 Testing package functionality..."
        node -e "
          async function test() {
            try {
              const { default: stringInject } = await import('./dist/index.js');

              // Test array substitution
              const result1 = stringInject('Hello {0}!', ['World']);
              if (result1 !== 'Hello World!') {
                throw new Error(\`Array test failed: expected 'Hello World!', got '\${result1}'\`);
              }

              // Test object substitution
              const result2 = stringInject('User {name} age {age}', { name: 'John', age: 30 });
              if (result2 !== 'User John age 30') {
                throw new Error(\`Object test failed: expected 'User John age 30', got '\${result2}'\`);
              }

              // Test invalid input
              const result3 = stringInject(123, ['test']);
              if (result3 !== false) {
                throw new Error(\`Invalid input test failed: expected false, got '\${result3}'\`);
              }

              console.log('✅ Package functionality verified');
            } catch (error) {
              console.error('❌ Package functionality test failed:', error.message);
              process.exit(1);
            }
          }
          test();
        "

    - name: 🎉 Publish readiness summary
      run: |
        echo "🎉 PUBLISH READINESS CHECK COMPLETED"
        echo ""
        echo "✅ Type checking passed"
        echo "✅ Unit tests passed (13 tests)"
        echo "✅ Integration tests passed (5 test suites)"
        echo "✅ Security audit passed"
        echo "✅ Package structure verified"
        echo "✅ Package functionality verified"
        echo ""
        echo "🚀 This package is ready for publishing to npm!"
        echo ""
        echo "To publish, run the 'Publish to NPM' workflow with your desired version bump."
